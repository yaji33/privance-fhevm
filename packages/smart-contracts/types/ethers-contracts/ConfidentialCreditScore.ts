/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface ConfidentialCreditScoreInterface extends Interface {
    getFunction(nameOrSignature: "computeCreditScore" | "getCreditScore" | "hasCreditScore" | "hasSubmittedData" | "submitBorrowerData"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "CreditScoreComputed" | "DataSubmitted"): EventFragment;

    encodeFunctionData(functionFragment: 'computeCreditScore', values?: undefined): string;
encodeFunctionData(functionFragment: 'getCreditScore', values?: undefined): string;
encodeFunctionData(functionFragment: 'hasCreditScore', values?: undefined): string;
encodeFunctionData(functionFragment: 'hasSubmittedData', values?: undefined): string;
encodeFunctionData(functionFragment: 'submitBorrowerData', values: [BytesLike, BytesLike, BytesLike, BytesLike]): string;

    decodeFunctionResult(functionFragment: 'computeCreditScore', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCreditScore', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasCreditScore', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasSubmittedData', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'submitBorrowerData', data: BytesLike): Result;
  }

  
    export namespace CreditScoreComputedEvent {
      export type InputTuple = [borrower: AddressLike];
      export type OutputTuple = [borrower: string];
      export interface OutputObject {borrower: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DataSubmittedEvent {
      export type InputTuple = [borrower: AddressLike];
      export type OutputTuple = [borrower: string];
      export interface OutputObject {borrower: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface ConfidentialCreditScore extends BaseContract {
    
    connect(runner?: ContractRunner | null): ConfidentialCreditScore;
    waitForDeployment(): Promise<this>;

    interface: ConfidentialCreditScoreInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    computeCreditScore: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    getCreditScore: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    hasCreditScore: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    hasSubmittedData: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    submitBorrowerData: TypedContractMethod<
      [encryptedIncome: BytesLike, encryptedRepaymentScore: BytesLike, encryptedLiabilities: BytesLike, inputProof: BytesLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'computeCreditScore'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getCreditScore'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'hasCreditScore'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'hasSubmittedData'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'submitBorrowerData'): TypedContractMethod<
      [encryptedIncome: BytesLike, encryptedRepaymentScore: BytesLike, encryptedLiabilities: BytesLike, inputProof: BytesLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'CreditScoreComputed'): TypedContractEvent<CreditScoreComputedEvent.InputTuple, CreditScoreComputedEvent.OutputTuple, CreditScoreComputedEvent.OutputObject>;
getEvent(key: 'DataSubmitted'): TypedContractEvent<DataSubmittedEvent.InputTuple, DataSubmittedEvent.OutputTuple, DataSubmittedEvent.OutputObject>;

    filters: {
      
      'CreditScoreComputed(address)': TypedContractEvent<CreditScoreComputedEvent.InputTuple, CreditScoreComputedEvent.OutputTuple, CreditScoreComputedEvent.OutputObject>;
      CreditScoreComputed: TypedContractEvent<CreditScoreComputedEvent.InputTuple, CreditScoreComputedEvent.OutputTuple, CreditScoreComputedEvent.OutputObject>;
    

      'DataSubmitted(address)': TypedContractEvent<DataSubmittedEvent.InputTuple, DataSubmittedEvent.OutputTuple, DataSubmittedEvent.OutputObject>;
      DataSubmitted: TypedContractEvent<DataSubmittedEvent.InputTuple, DataSubmittedEvent.OutputTuple, DataSubmittedEvent.OutputObject>;
    
    };
  }